# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from realsense2_camera/IMUInfo.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class IMUInfo(genpy.Message):
  _md5sum = "a02adb3a99530b11ba18a16f40f9512a"
  _type = "realsense2_camera/IMUInfo"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """string frame_id
float64[12] data
float64[3] noise_variances
float64[3] bias_variances

"""
  __slots__ = ['frame_id','data','noise_variances','bias_variances']
  _slot_types = ['string','float64[12]','float64[3]','float64[3]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       frame_id,data,noise_variances,bias_variances

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(IMUInfo, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.frame_id is None:
        self.frame_id = ''
      if self.data is None:
        self.data = [0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.]
      if self.noise_variances is None:
        self.noise_variances = [0.,0.,0.]
      if self.bias_variances is None:
        self.bias_variances = [0.,0.,0.]
    else:
      self.frame_id = ''
      self.data = [0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.]
      self.noise_variances = [0.,0.,0.]
      self.bias_variances = [0.,0.,0.]

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_struct_12d.pack(*self.data))
      buff.write(_struct_3d.pack(*self.noise_variances))
      buff.write(_struct_3d.pack(*self.bias_variances))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.frame_id = str[start:end].decode('utf-8')
      else:
        self.frame_id = str[start:end]
      start = end
      end += 96
      self.data = _struct_12d.unpack(str[start:end])
      start = end
      end += 24
      self.noise_variances = _struct_3d.unpack(str[start:end])
      start = end
      end += 24
      self.bias_variances = _struct_3d.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(self.data.tostring())
      buff.write(self.noise_variances.tostring())
      buff.write(self.bias_variances.tostring())
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.frame_id = str[start:end].decode('utf-8')
      else:
        self.frame_id = str[start:end]
      start = end
      end += 96
      self.data = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=12)
      start = end
      end += 24
      self.noise_variances = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=3)
      start = end
      end += 24
      self.bias_variances = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=3)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_12d = struct.Struct("<12d")
_struct_3d = struct.Struct("<3d")
