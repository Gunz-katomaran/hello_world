// Generated by gencpp from file my_change/Sonic.msg
// DO NOT EDIT!


#ifndef MY_CHANGE_MESSAGE_SONIC_H
#define MY_CHANGE_MESSAGE_SONIC_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace my_change
{
template <class ContainerAllocator>
struct Sonic_
{
  typedef Sonic_<ContainerAllocator> Type;

  Sonic_()
    : no(0)
    , distance1(0.0)
    , distance2(0.0)
    , distance3(0.0)
    , distance4(0.0)
    , distance5(0.0)  {
    }
  Sonic_(const ContainerAllocator& _alloc)
    : no(0)
    , distance1(0.0)
    , distance2(0.0)
    , distance3(0.0)
    , distance4(0.0)
    , distance5(0.0)  {
  (void)_alloc;
    }



   typedef int32_t _no_type;
  _no_type no;

   typedef float _distance1_type;
  _distance1_type distance1;

   typedef float _distance2_type;
  _distance2_type distance2;

   typedef float _distance3_type;
  _distance3_type distance3;

   typedef float _distance4_type;
  _distance4_type distance4;

   typedef float _distance5_type;
  _distance5_type distance5;





  typedef boost::shared_ptr< ::my_change::Sonic_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::my_change::Sonic_<ContainerAllocator> const> ConstPtr;

}; // struct Sonic_

typedef ::my_change::Sonic_<std::allocator<void> > Sonic;

typedef boost::shared_ptr< ::my_change::Sonic > SonicPtr;
typedef boost::shared_ptr< ::my_change::Sonic const> SonicConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::my_change::Sonic_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::my_change::Sonic_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace my_change

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'my_change': ['/home/katomaran-ros/catkin_ws8/src/my_change/msg', '/home/katomaran-ros/catkin_ws8/src/my_change/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::my_change::Sonic_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::my_change::Sonic_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::my_change::Sonic_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::my_change::Sonic_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::my_change::Sonic_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::my_change::Sonic_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::my_change::Sonic_<ContainerAllocator> >
{
  static const char* value()
  {
    return "28ade20c4ac74f4cfe91fd6effaf9b2e";
  }

  static const char* value(const ::my_change::Sonic_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x28ade20c4ac74f4cULL;
  static const uint64_t static_value2 = 0xfe91fd6effaf9b2eULL;
};

template<class ContainerAllocator>
struct DataType< ::my_change::Sonic_<ContainerAllocator> >
{
  static const char* value()
  {
    return "my_change/Sonic";
  }

  static const char* value(const ::my_change::Sonic_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::my_change::Sonic_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 no\n\
float32 distance1\n\
float32 distance2\n\
float32 distance3\n\
float32 distance4\n\
float32 distance5\n\
";
  }

  static const char* value(const ::my_change::Sonic_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::my_change::Sonic_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.no);
      stream.next(m.distance1);
      stream.next(m.distance2);
      stream.next(m.distance3);
      stream.next(m.distance4);
      stream.next(m.distance5);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Sonic_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::my_change::Sonic_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::my_change::Sonic_<ContainerAllocator>& v)
  {
    s << indent << "no: ";
    Printer<int32_t>::stream(s, indent + "  ", v.no);
    s << indent << "distance1: ";
    Printer<float>::stream(s, indent + "  ", v.distance1);
    s << indent << "distance2: ";
    Printer<float>::stream(s, indent + "  ", v.distance2);
    s << indent << "distance3: ";
    Printer<float>::stream(s, indent + "  ", v.distance3);
    s << indent << "distance4: ";
    Printer<float>::stream(s, indent + "  ", v.distance4);
    s << indent << "distance5: ";
    Printer<float>::stream(s, indent + "  ", v.distance5);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MY_CHANGE_MESSAGE_SONIC_H
