# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from path_follower/PointList.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import path_follower.msg

class PointList(genpy.Message):
  _md5sum = "f639923d0e4b33008c322b16a61c2555"
  _type = "path_follower/PointList"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """path_follower/PoseList[] pose_list

================================================================================
MSG: path_follower/PoseList
float32[] list

"""
  __slots__ = ['pose_list']
  _slot_types = ['path_follower/PoseList[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       pose_list

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(PointList, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.pose_list is None:
        self.pose_list = []
    else:
      self.pose_list = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      length = len(self.pose_list)
      buff.write(_struct_I.pack(length))
      for val1 in self.pose_list:
        length = len(val1.list)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(struct.pack(pattern, *val1.list))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.pose_list is None:
        self.pose_list = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.pose_list = []
      for i in range(0, length):
        val1 = path_follower.msg.PoseList()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        end += struct.calcsize(pattern)
        val1.list = struct.unpack(pattern, str[start:end])
        self.pose_list.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      length = len(self.pose_list)
      buff.write(_struct_I.pack(length))
      for val1 in self.pose_list:
        length = len(val1.list)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(val1.list.tostring())
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.pose_list is None:
        self.pose_list = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.pose_list = []
      for i in range(0, length):
        val1 = path_follower.msg.PoseList()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        end += struct.calcsize(pattern)
        val1.list = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
        self.pose_list.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
