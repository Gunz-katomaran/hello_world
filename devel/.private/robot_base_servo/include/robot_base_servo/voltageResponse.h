// Generated by gencpp from file robot_base_servo/voltageResponse.msg
// DO NOT EDIT!


#ifndef ROBOT_BASE_SERVO_MESSAGE_VOLTAGERESPONSE_H
#define ROBOT_BASE_SERVO_MESSAGE_VOLTAGERESPONSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace robot_base_servo
{
template <class ContainerAllocator>
struct voltageResponse_
{
  typedef voltageResponse_<ContainerAllocator> Type;

  voltageResponse_()
    : volt_1(0.0)
    , volt_2(0.0)
    , volt_3(0.0)
    , volt_4(0.0)  {
    }
  voltageResponse_(const ContainerAllocator& _alloc)
    : volt_1(0.0)
    , volt_2(0.0)
    , volt_3(0.0)
    , volt_4(0.0)  {
  (void)_alloc;
    }



   typedef float _volt_1_type;
  _volt_1_type volt_1;

   typedef float _volt_2_type;
  _volt_2_type volt_2;

   typedef float _volt_3_type;
  _volt_3_type volt_3;

   typedef float _volt_4_type;
  _volt_4_type volt_4;





  typedef boost::shared_ptr< ::robot_base_servo::voltageResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::robot_base_servo::voltageResponse_<ContainerAllocator> const> ConstPtr;

}; // struct voltageResponse_

typedef ::robot_base_servo::voltageResponse_<std::allocator<void> > voltageResponse;

typedef boost::shared_ptr< ::robot_base_servo::voltageResponse > voltageResponsePtr;
typedef boost::shared_ptr< ::robot_base_servo::voltageResponse const> voltageResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::robot_base_servo::voltageResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::robot_base_servo::voltageResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace robot_base_servo

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::robot_base_servo::voltageResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robot_base_servo::voltageResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robot_base_servo::voltageResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robot_base_servo::voltageResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robot_base_servo::voltageResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robot_base_servo::voltageResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::robot_base_servo::voltageResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "00886afbc7627a03f5753fba171f3ab9";
  }

  static const char* value(const ::robot_base_servo::voltageResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x00886afbc7627a03ULL;
  static const uint64_t static_value2 = 0xf5753fba171f3ab9ULL;
};

template<class ContainerAllocator>
struct DataType< ::robot_base_servo::voltageResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "robot_base_servo/voltageResponse";
  }

  static const char* value(const ::robot_base_servo::voltageResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::robot_base_servo::voltageResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 volt_1\n\
float32 volt_2\n\
float32 volt_3\n\
float32 volt_4\n\
\n\
";
  }

  static const char* value(const ::robot_base_servo::voltageResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::robot_base_servo::voltageResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.volt_1);
      stream.next(m.volt_2);
      stream.next(m.volt_3);
      stream.next(m.volt_4);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct voltageResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::robot_base_servo::voltageResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::robot_base_servo::voltageResponse_<ContainerAllocator>& v)
  {
    s << indent << "volt_1: ";
    Printer<float>::stream(s, indent + "  ", v.volt_1);
    s << indent << "volt_2: ";
    Printer<float>::stream(s, indent + "  ", v.volt_2);
    s << indent << "volt_3: ";
    Printer<float>::stream(s, indent + "  ", v.volt_3);
    s << indent << "volt_4: ";
    Printer<float>::stream(s, indent + "  ", v.volt_4);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROBOT_BASE_SERVO_MESSAGE_VOLTAGERESPONSE_H
