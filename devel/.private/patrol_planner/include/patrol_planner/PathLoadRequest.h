// Generated by gencpp from file patrol_planner/PathLoadRequest.msg
// DO NOT EDIT!


#ifndef PATROL_PLANNER_MESSAGE_PATHLOADREQUEST_H
#define PATROL_PLANNER_MESSAGE_PATHLOADREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace patrol_planner
{
template <class ContainerAllocator>
struct PathLoadRequest_
{
  typedef PathLoadRequest_<ContainerAllocator> Type;

  PathLoadRequest_()
    : path_name()
    , table_path_name()  {
    }
  PathLoadRequest_(const ContainerAllocator& _alloc)
    : path_name(_alloc)
    , table_path_name(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _path_name_type;
  _path_name_type path_name;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _table_path_name_type;
  _table_path_name_type table_path_name;





  typedef boost::shared_ptr< ::patrol_planner::PathLoadRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::patrol_planner::PathLoadRequest_<ContainerAllocator> const> ConstPtr;

}; // struct PathLoadRequest_

typedef ::patrol_planner::PathLoadRequest_<std::allocator<void> > PathLoadRequest;

typedef boost::shared_ptr< ::patrol_planner::PathLoadRequest > PathLoadRequestPtr;
typedef boost::shared_ptr< ::patrol_planner::PathLoadRequest const> PathLoadRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::patrol_planner::PathLoadRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::patrol_planner::PathLoadRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace patrol_planner

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'patrol_planner': ['/home/katomaran-ros/catkin_ws8/src/patrol_planner/msg', '/home/katomaran-ros/catkin_ws8/src/patrol_planner/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::patrol_planner::PathLoadRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::patrol_planner::PathLoadRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::patrol_planner::PathLoadRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::patrol_planner::PathLoadRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::patrol_planner::PathLoadRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::patrol_planner::PathLoadRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::patrol_planner::PathLoadRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "1d8ce4942f499b13891f955110a0e842";
  }

  static const char* value(const ::patrol_planner::PathLoadRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x1d8ce4942f499b13ULL;
  static const uint64_t static_value2 = 0x891f955110a0e842ULL;
};

template<class ContainerAllocator>
struct DataType< ::patrol_planner::PathLoadRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "patrol_planner/PathLoadRequest";
  }

  static const char* value(const ::patrol_planner::PathLoadRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::patrol_planner::PathLoadRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string path_name\n\
string table_path_name\n\
";
  }

  static const char* value(const ::patrol_planner::PathLoadRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::patrol_planner::PathLoadRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.path_name);
      stream.next(m.table_path_name);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct PathLoadRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::patrol_planner::PathLoadRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::patrol_planner::PathLoadRequest_<ContainerAllocator>& v)
  {
    s << indent << "path_name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.path_name);
    s << indent << "table_path_name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.table_path_name);
  }
};

} // namespace message_operations
} // namespace ros

#endif // PATROL_PLANNER_MESSAGE_PATHLOADREQUEST_H
